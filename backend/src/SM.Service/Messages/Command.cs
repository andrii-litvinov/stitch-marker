// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Command.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SM.Service.Command {

  /// <summary>Holder for reflection information generated from Command.proto</summary>
  public static partial class CommandReflection {

    #region Descriptor
    /// <summary>File descriptor for Command.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommandReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1Db21tYW5kLnByb3RvEgdwYXR0ZXJuIlwKEE1hcmtCYWNrc3RpdGNoZXMS",
            "EgoKcGF0dGVybl9pZBgBIAEoCRI0CgxiYWNrc3RpdGNoZXMYAiADKAsyHi5w",
            "YXR0ZXJuLkJhY2tzdGl0Y2hDb29yZGluYXRlcyJeChJVbm1hcmtCYWNrc3Rp",
            "dGNoZXMSEgoKcGF0dGVybl9pZBgBIAEoCRI0CgxiYWNrc3RpdGNoZXMYAiAD",
            "KAsyHi5wYXR0ZXJuLkJhY2tzdGl0Y2hDb29yZGluYXRlcyJQCgxNYXJrU3Rp",
            "dGNoZXMSEgoKcGF0dGVybl9pZBgBIAEoCRIsCghzdGl0Y2hlcxgCIAMoCzIa",
            "LnBhdHRlcm4uU3RpdGNoQ29vcmRpbmF0ZXMiUgoOVW5tYXJrU3RpdGNoZXMS",
            "EgoKcGF0dGVybl9pZBgBIAEoCRIsCghzdGl0Y2hlcxgCIAMoCzIaLnBhdHRl",
            "cm4uU3RpdGNoQ29vcmRpbmF0ZXMiRwoVQmFja3N0aXRjaENvb3JkaW5hdGVz",
            "EgoKAlgxGAEgASgNEgoKAlkxGAIgASgNEgoKAlgyGAMgASgNEgoKAlkyGAQg",
            "ASgNIikKEVN0aXRjaENvb3JkaW5hdGVzEgkKAVgYASABKA0SCQoBWRgCIAEo",
            "DUIVqgISU00uU2VydmljZS5Db21tYW5kYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SM.Service.Command.MarkBackstitches), global::SM.Service.Command.MarkBackstitches.Parser, new[]{ "PatternId", "Backstitches" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SM.Service.Command.UnmarkBackstitches), global::SM.Service.Command.UnmarkBackstitches.Parser, new[]{ "PatternId", "Backstitches" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SM.Service.Command.MarkStitches), global::SM.Service.Command.MarkStitches.Parser, new[]{ "PatternId", "Stitches" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SM.Service.Command.UnmarkStitches), global::SM.Service.Command.UnmarkStitches.Parser, new[]{ "PatternId", "Stitches" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SM.Service.Command.BackstitchCoordinates), global::SM.Service.Command.BackstitchCoordinates.Parser, new[]{ "X1", "Y1", "X2", "Y2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SM.Service.Command.StitchCoordinates), global::SM.Service.Command.StitchCoordinates.Parser, new[]{ "X", "Y" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MarkBackstitches : pb::IMessage<MarkBackstitches> {
    private static readonly pb::MessageParser<MarkBackstitches> _parser = new pb::MessageParser<MarkBackstitches>(() => new MarkBackstitches());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarkBackstitches> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SM.Service.Command.CommandReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkBackstitches() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkBackstitches(MarkBackstitches other) : this() {
      patternId_ = other.patternId_;
      backstitches_ = other.backstitches_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkBackstitches Clone() {
      return new MarkBackstitches(this);
    }

    /// <summary>Field number for the "pattern_id" field.</summary>
    public const int PatternIdFieldNumber = 1;
    private string patternId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatternId {
      get { return patternId_; }
      set {
        patternId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backstitches" field.</summary>
    public const int BackstitchesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SM.Service.Command.BackstitchCoordinates> _repeated_backstitches_codec
        = pb::FieldCodec.ForMessage(18, global::SM.Service.Command.BackstitchCoordinates.Parser);
    private readonly pbc::RepeatedField<global::SM.Service.Command.BackstitchCoordinates> backstitches_ = new pbc::RepeatedField<global::SM.Service.Command.BackstitchCoordinates>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SM.Service.Command.BackstitchCoordinates> Backstitches {
      get { return backstitches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarkBackstitches);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarkBackstitches other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatternId != other.PatternId) return false;
      if(!backstitches_.Equals(other.backstitches_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PatternId.Length != 0) hash ^= PatternId.GetHashCode();
      hash ^= backstitches_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PatternId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PatternId);
      }
      backstitches_.WriteTo(output, _repeated_backstitches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PatternId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatternId);
      }
      size += backstitches_.CalculateSize(_repeated_backstitches_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarkBackstitches other) {
      if (other == null) {
        return;
      }
      if (other.PatternId.Length != 0) {
        PatternId = other.PatternId;
      }
      backstitches_.Add(other.backstitches_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatternId = input.ReadString();
            break;
          }
          case 18: {
            backstitches_.AddEntriesFrom(input, _repeated_backstitches_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnmarkBackstitches : pb::IMessage<UnmarkBackstitches> {
    private static readonly pb::MessageParser<UnmarkBackstitches> _parser = new pb::MessageParser<UnmarkBackstitches>(() => new UnmarkBackstitches());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnmarkBackstitches> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SM.Service.Command.CommandReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnmarkBackstitches() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnmarkBackstitches(UnmarkBackstitches other) : this() {
      patternId_ = other.patternId_;
      backstitches_ = other.backstitches_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnmarkBackstitches Clone() {
      return new UnmarkBackstitches(this);
    }

    /// <summary>Field number for the "pattern_id" field.</summary>
    public const int PatternIdFieldNumber = 1;
    private string patternId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatternId {
      get { return patternId_; }
      set {
        patternId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backstitches" field.</summary>
    public const int BackstitchesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SM.Service.Command.BackstitchCoordinates> _repeated_backstitches_codec
        = pb::FieldCodec.ForMessage(18, global::SM.Service.Command.BackstitchCoordinates.Parser);
    private readonly pbc::RepeatedField<global::SM.Service.Command.BackstitchCoordinates> backstitches_ = new pbc::RepeatedField<global::SM.Service.Command.BackstitchCoordinates>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SM.Service.Command.BackstitchCoordinates> Backstitches {
      get { return backstitches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnmarkBackstitches);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnmarkBackstitches other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatternId != other.PatternId) return false;
      if(!backstitches_.Equals(other.backstitches_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PatternId.Length != 0) hash ^= PatternId.GetHashCode();
      hash ^= backstitches_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PatternId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PatternId);
      }
      backstitches_.WriteTo(output, _repeated_backstitches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PatternId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatternId);
      }
      size += backstitches_.CalculateSize(_repeated_backstitches_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnmarkBackstitches other) {
      if (other == null) {
        return;
      }
      if (other.PatternId.Length != 0) {
        PatternId = other.PatternId;
      }
      backstitches_.Add(other.backstitches_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatternId = input.ReadString();
            break;
          }
          case 18: {
            backstitches_.AddEntriesFrom(input, _repeated_backstitches_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MarkStitches : pb::IMessage<MarkStitches> {
    private static readonly pb::MessageParser<MarkStitches> _parser = new pb::MessageParser<MarkStitches>(() => new MarkStitches());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarkStitches> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SM.Service.Command.CommandReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkStitches() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkStitches(MarkStitches other) : this() {
      patternId_ = other.patternId_;
      stitches_ = other.stitches_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkStitches Clone() {
      return new MarkStitches(this);
    }

    /// <summary>Field number for the "pattern_id" field.</summary>
    public const int PatternIdFieldNumber = 1;
    private string patternId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatternId {
      get { return patternId_; }
      set {
        patternId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stitches" field.</summary>
    public const int StitchesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SM.Service.Command.StitchCoordinates> _repeated_stitches_codec
        = pb::FieldCodec.ForMessage(18, global::SM.Service.Command.StitchCoordinates.Parser);
    private readonly pbc::RepeatedField<global::SM.Service.Command.StitchCoordinates> stitches_ = new pbc::RepeatedField<global::SM.Service.Command.StitchCoordinates>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SM.Service.Command.StitchCoordinates> Stitches {
      get { return stitches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarkStitches);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarkStitches other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatternId != other.PatternId) return false;
      if(!stitches_.Equals(other.stitches_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PatternId.Length != 0) hash ^= PatternId.GetHashCode();
      hash ^= stitches_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PatternId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PatternId);
      }
      stitches_.WriteTo(output, _repeated_stitches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PatternId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatternId);
      }
      size += stitches_.CalculateSize(_repeated_stitches_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarkStitches other) {
      if (other == null) {
        return;
      }
      if (other.PatternId.Length != 0) {
        PatternId = other.PatternId;
      }
      stitches_.Add(other.stitches_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatternId = input.ReadString();
            break;
          }
          case 18: {
            stitches_.AddEntriesFrom(input, _repeated_stitches_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnmarkStitches : pb::IMessage<UnmarkStitches> {
    private static readonly pb::MessageParser<UnmarkStitches> _parser = new pb::MessageParser<UnmarkStitches>(() => new UnmarkStitches());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnmarkStitches> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SM.Service.Command.CommandReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnmarkStitches() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnmarkStitches(UnmarkStitches other) : this() {
      patternId_ = other.patternId_;
      stitches_ = other.stitches_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnmarkStitches Clone() {
      return new UnmarkStitches(this);
    }

    /// <summary>Field number for the "pattern_id" field.</summary>
    public const int PatternIdFieldNumber = 1;
    private string patternId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatternId {
      get { return patternId_; }
      set {
        patternId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stitches" field.</summary>
    public const int StitchesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SM.Service.Command.StitchCoordinates> _repeated_stitches_codec
        = pb::FieldCodec.ForMessage(18, global::SM.Service.Command.StitchCoordinates.Parser);
    private readonly pbc::RepeatedField<global::SM.Service.Command.StitchCoordinates> stitches_ = new pbc::RepeatedField<global::SM.Service.Command.StitchCoordinates>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SM.Service.Command.StitchCoordinates> Stitches {
      get { return stitches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnmarkStitches);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnmarkStitches other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatternId != other.PatternId) return false;
      if(!stitches_.Equals(other.stitches_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PatternId.Length != 0) hash ^= PatternId.GetHashCode();
      hash ^= stitches_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PatternId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PatternId);
      }
      stitches_.WriteTo(output, _repeated_stitches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PatternId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatternId);
      }
      size += stitches_.CalculateSize(_repeated_stitches_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnmarkStitches other) {
      if (other == null) {
        return;
      }
      if (other.PatternId.Length != 0) {
        PatternId = other.PatternId;
      }
      stitches_.Add(other.stitches_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatternId = input.ReadString();
            break;
          }
          case 18: {
            stitches_.AddEntriesFrom(input, _repeated_stitches_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BackstitchCoordinates : pb::IMessage<BackstitchCoordinates> {
    private static readonly pb::MessageParser<BackstitchCoordinates> _parser = new pb::MessageParser<BackstitchCoordinates>(() => new BackstitchCoordinates());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BackstitchCoordinates> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SM.Service.Command.CommandReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackstitchCoordinates() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackstitchCoordinates(BackstitchCoordinates other) : this() {
      x1_ = other.x1_;
      y1_ = other.y1_;
      x2_ = other.x2_;
      y2_ = other.y2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackstitchCoordinates Clone() {
      return new BackstitchCoordinates(this);
    }

    /// <summary>Field number for the "X1" field.</summary>
    public const int X1FieldNumber = 1;
    private uint x1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint X1 {
      get { return x1_; }
      set {
        x1_ = value;
      }
    }

    /// <summary>Field number for the "Y1" field.</summary>
    public const int Y1FieldNumber = 2;
    private uint y1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Y1 {
      get { return y1_; }
      set {
        y1_ = value;
      }
    }

    /// <summary>Field number for the "X2" field.</summary>
    public const int X2FieldNumber = 3;
    private uint x2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint X2 {
      get { return x2_; }
      set {
        x2_ = value;
      }
    }

    /// <summary>Field number for the "Y2" field.</summary>
    public const int Y2FieldNumber = 4;
    private uint y2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Y2 {
      get { return y2_; }
      set {
        y2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BackstitchCoordinates);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BackstitchCoordinates other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X1 != other.X1) return false;
      if (Y1 != other.Y1) return false;
      if (X2 != other.X2) return false;
      if (Y2 != other.Y2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X1 != 0) hash ^= X1.GetHashCode();
      if (Y1 != 0) hash ^= Y1.GetHashCode();
      if (X2 != 0) hash ^= X2.GetHashCode();
      if (Y2 != 0) hash ^= Y2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X1 != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(X1);
      }
      if (Y1 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Y1);
      }
      if (X2 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(X2);
      }
      if (Y2 != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Y2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X1);
      }
      if (Y1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y1);
      }
      if (X2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X2);
      }
      if (Y2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BackstitchCoordinates other) {
      if (other == null) {
        return;
      }
      if (other.X1 != 0) {
        X1 = other.X1;
      }
      if (other.Y1 != 0) {
        Y1 = other.Y1;
      }
      if (other.X2 != 0) {
        X2 = other.X2;
      }
      if (other.Y2 != 0) {
        Y2 = other.Y2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X1 = input.ReadUInt32();
            break;
          }
          case 16: {
            Y1 = input.ReadUInt32();
            break;
          }
          case 24: {
            X2 = input.ReadUInt32();
            break;
          }
          case 32: {
            Y2 = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StitchCoordinates : pb::IMessage<StitchCoordinates> {
    private static readonly pb::MessageParser<StitchCoordinates> _parser = new pb::MessageParser<StitchCoordinates>(() => new StitchCoordinates());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StitchCoordinates> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SM.Service.Command.CommandReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StitchCoordinates() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StitchCoordinates(StitchCoordinates other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StitchCoordinates Clone() {
      return new StitchCoordinates(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private uint x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private uint y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StitchCoordinates);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StitchCoordinates other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StitchCoordinates other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadUInt32();
            break;
          }
          case 16: {
            Y = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
