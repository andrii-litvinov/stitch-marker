// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Command.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Service {

  /// <summary>Holder for reflection information generated from Command.proto</summary>
  public static partial class CommandReflection {

    #region Descriptor
    /// <summary>File descriptor for Command.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommandReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1Db21tYW5kLnByb3RvEgdwYXR0ZXJuGhJCYWNrc3RpdGNoSWQucHJvdG8a",
            "DlN0aXRjaElkLnByb3RvIlMKEE1hcmtCYWNrc3RpdGNoZXMSEgoKcGF0dGVy",
            "bl9pZBgBIAEoCRIrCgxiYWNrc3RpdGNoZXMYAiADKAsyFS5wYXR0ZXJuLkJh",
            "Y2tzdGl0Y2hJZCJVChJVbm1hcmtCYWNrc3RpdGNoZXMSEgoKcGF0dGVybl9p",
            "ZBgBIAEoCRIrCgxiYWNrc3RpdGNoZXMYAiADKAsyFS5wYXR0ZXJuLkJhY2tz",
            "dGl0Y2hJZCJHCgxNYXJrU3RpdGNoZXMSEgoKcGF0dGVybl9pZBgBIAEoCRIj",
            "CghzdGl0Y2hlcxgCIAMoCzIRLnBhdHRlcm4uU3RpdGNoSWQiSQoOVW5tYXJr",
            "U3RpdGNoZXMSEgoKcGF0dGVybl9pZBgBIAEoCRIjCghzdGl0Y2hlcxgCIAMo",
            "CzIRLnBhdHRlcm4uU3RpdGNoSWRCCqoCB1NlcnZpY2VQAFABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Service.BackstitchIdReflection.Descriptor, global::Service.StitchIdReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Service.MarkBackstitches), global::Service.MarkBackstitches.Parser, new[]{ "PatternId", "Backstitches" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Service.UnmarkBackstitches), global::Service.UnmarkBackstitches.Parser, new[]{ "PatternId", "Backstitches" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Service.MarkStitches), global::Service.MarkStitches.Parser, new[]{ "PatternId", "Stitches" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Service.UnmarkStitches), global::Service.UnmarkStitches.Parser, new[]{ "PatternId", "Stitches" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MarkBackstitches : pb::IMessage<MarkBackstitches> {
    private static readonly pb::MessageParser<MarkBackstitches> _parser = new pb::MessageParser<MarkBackstitches>(() => new MarkBackstitches());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarkBackstitches> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Service.CommandReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkBackstitches() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkBackstitches(MarkBackstitches other) : this() {
      patternId_ = other.patternId_;
      backstitches_ = other.backstitches_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkBackstitches Clone() {
      return new MarkBackstitches(this);
    }

    /// <summary>Field number for the "pattern_id" field.</summary>
    public const int PatternIdFieldNumber = 1;
    private string patternId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatternId {
      get { return patternId_; }
      set {
        patternId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backstitches" field.</summary>
    public const int BackstitchesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Service.BackstitchId> _repeated_backstitches_codec
        = pb::FieldCodec.ForMessage(18, global::Service.BackstitchId.Parser);
    private readonly pbc::RepeatedField<global::Service.BackstitchId> backstitches_ = new pbc::RepeatedField<global::Service.BackstitchId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Service.BackstitchId> Backstitches {
      get { return backstitches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarkBackstitches);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarkBackstitches other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatternId != other.PatternId) return false;
      if(!backstitches_.Equals(other.backstitches_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PatternId.Length != 0) hash ^= PatternId.GetHashCode();
      hash ^= backstitches_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PatternId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PatternId);
      }
      backstitches_.WriteTo(output, _repeated_backstitches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PatternId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatternId);
      }
      size += backstitches_.CalculateSize(_repeated_backstitches_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarkBackstitches other) {
      if (other == null) {
        return;
      }
      if (other.PatternId.Length != 0) {
        PatternId = other.PatternId;
      }
      backstitches_.Add(other.backstitches_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatternId = input.ReadString();
            break;
          }
          case 18: {
            backstitches_.AddEntriesFrom(input, _repeated_backstitches_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnmarkBackstitches : pb::IMessage<UnmarkBackstitches> {
    private static readonly pb::MessageParser<UnmarkBackstitches> _parser = new pb::MessageParser<UnmarkBackstitches>(() => new UnmarkBackstitches());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnmarkBackstitches> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Service.CommandReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnmarkBackstitches() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnmarkBackstitches(UnmarkBackstitches other) : this() {
      patternId_ = other.patternId_;
      backstitches_ = other.backstitches_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnmarkBackstitches Clone() {
      return new UnmarkBackstitches(this);
    }

    /// <summary>Field number for the "pattern_id" field.</summary>
    public const int PatternIdFieldNumber = 1;
    private string patternId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatternId {
      get { return patternId_; }
      set {
        patternId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backstitches" field.</summary>
    public const int BackstitchesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Service.BackstitchId> _repeated_backstitches_codec
        = pb::FieldCodec.ForMessage(18, global::Service.BackstitchId.Parser);
    private readonly pbc::RepeatedField<global::Service.BackstitchId> backstitches_ = new pbc::RepeatedField<global::Service.BackstitchId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Service.BackstitchId> Backstitches {
      get { return backstitches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnmarkBackstitches);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnmarkBackstitches other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatternId != other.PatternId) return false;
      if(!backstitches_.Equals(other.backstitches_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PatternId.Length != 0) hash ^= PatternId.GetHashCode();
      hash ^= backstitches_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PatternId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PatternId);
      }
      backstitches_.WriteTo(output, _repeated_backstitches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PatternId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatternId);
      }
      size += backstitches_.CalculateSize(_repeated_backstitches_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnmarkBackstitches other) {
      if (other == null) {
        return;
      }
      if (other.PatternId.Length != 0) {
        PatternId = other.PatternId;
      }
      backstitches_.Add(other.backstitches_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatternId = input.ReadString();
            break;
          }
          case 18: {
            backstitches_.AddEntriesFrom(input, _repeated_backstitches_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MarkStitches : pb::IMessage<MarkStitches> {
    private static readonly pb::MessageParser<MarkStitches> _parser = new pb::MessageParser<MarkStitches>(() => new MarkStitches());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarkStitches> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Service.CommandReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkStitches() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkStitches(MarkStitches other) : this() {
      patternId_ = other.patternId_;
      stitches_ = other.stitches_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkStitches Clone() {
      return new MarkStitches(this);
    }

    /// <summary>Field number for the "pattern_id" field.</summary>
    public const int PatternIdFieldNumber = 1;
    private string patternId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatternId {
      get { return patternId_; }
      set {
        patternId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stitches" field.</summary>
    public const int StitchesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Service.StitchId> _repeated_stitches_codec
        = pb::FieldCodec.ForMessage(18, global::Service.StitchId.Parser);
    private readonly pbc::RepeatedField<global::Service.StitchId> stitches_ = new pbc::RepeatedField<global::Service.StitchId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Service.StitchId> Stitches {
      get { return stitches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarkStitches);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarkStitches other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatternId != other.PatternId) return false;
      if(!stitches_.Equals(other.stitches_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PatternId.Length != 0) hash ^= PatternId.GetHashCode();
      hash ^= stitches_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PatternId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PatternId);
      }
      stitches_.WriteTo(output, _repeated_stitches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PatternId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatternId);
      }
      size += stitches_.CalculateSize(_repeated_stitches_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarkStitches other) {
      if (other == null) {
        return;
      }
      if (other.PatternId.Length != 0) {
        PatternId = other.PatternId;
      }
      stitches_.Add(other.stitches_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatternId = input.ReadString();
            break;
          }
          case 18: {
            stitches_.AddEntriesFrom(input, _repeated_stitches_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnmarkStitches : pb::IMessage<UnmarkStitches> {
    private static readonly pb::MessageParser<UnmarkStitches> _parser = new pb::MessageParser<UnmarkStitches>(() => new UnmarkStitches());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnmarkStitches> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Service.CommandReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnmarkStitches() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnmarkStitches(UnmarkStitches other) : this() {
      patternId_ = other.patternId_;
      stitches_ = other.stitches_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnmarkStitches Clone() {
      return new UnmarkStitches(this);
    }

    /// <summary>Field number for the "pattern_id" field.</summary>
    public const int PatternIdFieldNumber = 1;
    private string patternId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PatternId {
      get { return patternId_; }
      set {
        patternId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stitches" field.</summary>
    public const int StitchesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Service.StitchId> _repeated_stitches_codec
        = pb::FieldCodec.ForMessage(18, global::Service.StitchId.Parser);
    private readonly pbc::RepeatedField<global::Service.StitchId> stitches_ = new pbc::RepeatedField<global::Service.StitchId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Service.StitchId> Stitches {
      get { return stitches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnmarkStitches);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnmarkStitches other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PatternId != other.PatternId) return false;
      if(!stitches_.Equals(other.stitches_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PatternId.Length != 0) hash ^= PatternId.GetHashCode();
      hash ^= stitches_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PatternId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PatternId);
      }
      stitches_.WriteTo(output, _repeated_stitches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PatternId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PatternId);
      }
      size += stitches_.CalculateSize(_repeated_stitches_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnmarkStitches other) {
      if (other == null) {
        return;
      }
      if (other.PatternId.Length != 0) {
        PatternId = other.PatternId;
      }
      stitches_.Add(other.stitches_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PatternId = input.ReadString();
            break;
          }
          case 18: {
            stitches_.AddEntriesFrom(input, _repeated_stitches_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
