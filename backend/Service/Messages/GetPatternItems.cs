// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GetPatternItems.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Service {

  /// <summary>Holder for reflection information generated from GetPatternItems.proto</summary>
  public static partial class GetPatternItemsReflection {

    #region Descriptor
    /// <summary>File descriptor for GetPatternItems.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GetPatternItemsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVHZXRQYXR0ZXJuSXRlbXMucHJvdG8SB3BhdHRlcm4aDVBhdHRlcm4ucHJv",
            "dG8iUwoPR2V0UGF0dGVybkl0ZW1zEhIKCnJlcXVlc3RfaWQYASABKAkSEAoI",
            "b3duZXJfaWQYAiABKAkSDAoEc2tpcBgDIAEoBRIMCgR0YWtlGAQgASgFQgqq",
            "AgdTZXJ2aWNlUABiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Service.PatternReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Service.GetPatternItems), global::Service.GetPatternItems.Parser, new[]{ "RequestId", "OwnerId", "Skip", "Take" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GetPatternItems : pb::IMessage<GetPatternItems> {
    private static readonly pb::MessageParser<GetPatternItems> _parser = new pb::MessageParser<GetPatternItems>(() => new GetPatternItems());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPatternItems> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Service.GetPatternItemsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPatternItems() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPatternItems(GetPatternItems other) : this() {
      requestId_ = other.requestId_;
      ownerId_ = other.ownerId_;
      skip_ = other.skip_;
      take_ = other.take_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPatternItems Clone() {
      return new GetPatternItems(this);
    }

    /// <summary>Field number for the "request_id" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private string requestId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 2;
    private string ownerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skip" field.</summary>
    public const int SkipFieldNumber = 3;
    private int skip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skip {
      get { return skip_; }
      set {
        skip_ = value;
      }
    }

    /// <summary>Field number for the "take" field.</summary>
    public const int TakeFieldNumber = 4;
    private int take_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Take {
      get { return take_; }
      set {
        take_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPatternItems);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPatternItems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (OwnerId != other.OwnerId) return false;
      if (Skip != other.Skip) return false;
      if (Take != other.Take) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
      if (OwnerId.Length != 0) hash ^= OwnerId.GetHashCode();
      if (Skip != 0) hash ^= Skip.GetHashCode();
      if (Take != 0) hash ^= Take.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestId);
      }
      if (OwnerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OwnerId);
      }
      if (Skip != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Skip);
      }
      if (Take != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Take);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      if (OwnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerId);
      }
      if (Skip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skip);
      }
      if (Take != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Take);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPatternItems other) {
      if (other == null) {
        return;
      }
      if (other.RequestId.Length != 0) {
        RequestId = other.RequestId;
      }
      if (other.OwnerId.Length != 0) {
        OwnerId = other.OwnerId;
      }
      if (other.Skip != 0) {
        Skip = other.Skip;
      }
      if (other.Take != 0) {
        Take = other.Take;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RequestId = input.ReadString();
            break;
          }
          case 18: {
            OwnerId = input.ReadString();
            break;
          }
          case 24: {
            Skip = input.ReadInt32();
            break;
          }
          case 32: {
            Take = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
