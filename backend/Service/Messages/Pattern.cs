// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Pattern.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Service {

  /// <summary>Holder for reflection information generated from Pattern.proto</summary>
  public static partial class PatternReflection {

    #region Descriptor
    /// <summary>File descriptor for Pattern.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PatternReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1QYXR0ZXJuLnByb3RvEgdwYXR0ZXJuIs8CCgdQYXR0ZXJuEgoKAmlkGAEg",
            "ASgJEhsKBGluZm8YAiABKAsyDS5wYXR0ZXJuLkluZm8SHwoGY2FudmFzGAMg",
            "ASgLMg8ucGF0dGVybi5DYW52YXMSIQoHc3RyYW5kcxgEIAEoCzIQLnBhdHRl",
            "cm4uU3RyYW5kcxINCgV3aWR0aBgFIAEoDRIOCgZoZWlnaHQYBiABKA0SNAoO",
            "Y29uZmlndXJhdGlvbnMYByADKAsyHC5wYXR0ZXJuLlN0aXRjaENvbmZpZ3Vy",
            "YXRpb24SIQoIc3RpdGNoZXMYCCADKAsyDy5wYXR0ZXJuLlN0aXRjaBIpCgxi",
            "YWNrc3RpdGNoZXMYCSADKAsyEy5wYXR0ZXJuLkJhY2tzdGl0Y2gSIgoIZWxl",
            "bWVudHMYCiADKAsyEC5wYXR0ZXJuLkVsZW1lbnQSEAoIb3duZXJfaWQYCyAB",
            "KAkiSQoESW5mbxINCgV0aXRsZRgBIAEoCRIOCgZhdXRob3IYAiABKAkSDwoH",
            "Y29tcGFueRgDIAEoCRIRCgljb3B5cmlnaHQYBCABKAkiFwoGQ2FudmFzEg0K",
            "BXRpdGxlGAEgASgJIoUBCgdTdHJhbmRzEgwKBGZ1bGwYASABKAUSDAoEaGFs",
            "ZhgCIAEoBRIPCgdxdWFydGVyGAMgASgFEhUKDXRocmVlX3F1YXJ0ZXIYBCAB",
            "KAUSDQoFcGV0aXQYBSABKAUSEgoKYmFja3N0aXRjaBgGIAEoBRITCgtmcmVu",
            "Y2hfa25vdBgHIAEoBSJbChNTdGl0Y2hDb25maWd1cmF0aW9uEg4KBnN5bWJv",
            "bBgBIAEoCRIRCgloZXhfY29sb3IYAiABKAkSIQoHc3RyYW5kcxgDIAEoCzIQ",
            "LnBhdHRlcm4uU3RyYW5kcyJuCgZTdGl0Y2gSCQoBeBgBIAEoDRIJCgF5GAIg",
            "ASgNEiEKBHR5cGUYAyABKA4yEy5wYXR0ZXJuLlN0aXRjaFR5cGUSGwoTY29u",
            "ZmlndXJhdGlvbl9pbmRleBgEIAEoBRIOCgZtYXJrZWQYBSABKAgibQoKQmFj",
            "a3N0aXRjaBILCgN4XzEYASABKA0SCwoDeV8xGAIgASgNEgsKA3hfMhgDIAEo",
            "DRILCgN5XzIYBCABKA0SGwoTY29uZmlndXJhdGlvbl9pbmRleBgFIAEoBRIO",
            "CgZtYXJrZWQYBiABKAgiYAoHRWxlbWVudBIJCgF4GAEgASgNEgkKAXkYAiAB",
            "KA0SGwoTY29uZmlndXJhdGlvbl9pbmRleBgDIAEoBRIiCgR0eXBlGAQgASgO",
            "MhQucGF0dGVybi5FbGVtZW50VHlwZSpUCgpTdGl0Y2hUeXBlEggKBE5PTkUQ",
            "ABIICgRGVUxMEAESCAoESEFMRhACEgsKB1FVQVJURVIQAxIQCgxUSFJFRVFV",
            "QVJURVIQBBIJCgVQRVRJVBAFKjYKC0VsZW1lbnRUeXBlEg0KCVVOREVGSU5F",
            "RBAAEg4KCkZSRU5DSEtOT1QQARIICgRCRUFEEAJCCqoCB1NlcnZpY2ViBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Service.StitchType), typeof(global::Service.ElementType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Service.Pattern), global::Service.Pattern.Parser, new[]{ "Id", "Info", "Canvas", "Strands", "Width", "Height", "Configurations", "Stitches", "Backstitches", "Elements", "OwnerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Service.Info), global::Service.Info.Parser, new[]{ "Title", "Author", "Company", "Copyright" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Service.Canvas), global::Service.Canvas.Parser, new[]{ "Title" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Service.Strands), global::Service.Strands.Parser, new[]{ "Full", "Half", "Quarter", "ThreeQuarter", "Petit", "Backstitch", "FrenchKnot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Service.StitchConfiguration), global::Service.StitchConfiguration.Parser, new[]{ "Symbol", "HexColor", "Strands" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Service.Stitch), global::Service.Stitch.Parser, new[]{ "X", "Y", "Type", "ConfigurationIndex", "Marked" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Service.Backstitch), global::Service.Backstitch.Parser, new[]{ "X1", "Y1", "X2", "Y2", "ConfigurationIndex", "Marked" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Service.Element), global::Service.Element.Parser, new[]{ "X", "Y", "ConfigurationIndex", "Type" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum StitchType {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("FULL")] Full = 1,
    [pbr::OriginalName("HALF")] Half = 2,
    [pbr::OriginalName("QUARTER")] Quarter = 3,
    [pbr::OriginalName("THREEQUARTER")] Threequarter = 4,
    [pbr::OriginalName("PETIT")] Petit = 5,
  }

  public enum ElementType {
    [pbr::OriginalName("UNDEFINED")] Undefined = 0,
    [pbr::OriginalName("FRENCHKNOT")] Frenchknot = 1,
    [pbr::OriginalName("BEAD")] Bead = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Pattern : pb::IMessage<Pattern> {
    private static readonly pb::MessageParser<Pattern> _parser = new pb::MessageParser<Pattern>(() => new Pattern());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pattern> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Service.PatternReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pattern() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pattern(Pattern other) : this() {
      id_ = other.id_;
      info_ = other.info_ != null ? other.info_.Clone() : null;
      canvas_ = other.canvas_ != null ? other.canvas_.Clone() : null;
      strands_ = other.strands_ != null ? other.strands_.Clone() : null;
      width_ = other.width_;
      height_ = other.height_;
      configurations_ = other.configurations_.Clone();
      stitches_ = other.stitches_.Clone();
      backstitches_ = other.backstitches_.Clone();
      elements_ = other.elements_.Clone();
      ownerId_ = other.ownerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pattern Clone() {
      return new Pattern(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Service.Info info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Service.Info Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "canvas" field.</summary>
    public const int CanvasFieldNumber = 3;
    private global::Service.Canvas canvas_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Service.Canvas Canvas {
      get { return canvas_; }
      set {
        canvas_ = value;
      }
    }

    /// <summary>Field number for the "strands" field.</summary>
    public const int StrandsFieldNumber = 4;
    private global::Service.Strands strands_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Service.Strands Strands {
      get { return strands_; }
      set {
        strands_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 5;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 6;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "configurations" field.</summary>
    public const int ConfigurationsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Service.StitchConfiguration> _repeated_configurations_codec
        = pb::FieldCodec.ForMessage(58, global::Service.StitchConfiguration.Parser);
    private readonly pbc::RepeatedField<global::Service.StitchConfiguration> configurations_ = new pbc::RepeatedField<global::Service.StitchConfiguration>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Service.StitchConfiguration> Configurations {
      get { return configurations_; }
    }

    /// <summary>Field number for the "stitches" field.</summary>
    public const int StitchesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Service.Stitch> _repeated_stitches_codec
        = pb::FieldCodec.ForMessage(66, global::Service.Stitch.Parser);
    private readonly pbc::RepeatedField<global::Service.Stitch> stitches_ = new pbc::RepeatedField<global::Service.Stitch>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Service.Stitch> Stitches {
      get { return stitches_; }
    }

    /// <summary>Field number for the "backstitches" field.</summary>
    public const int BackstitchesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Service.Backstitch> _repeated_backstitches_codec
        = pb::FieldCodec.ForMessage(74, global::Service.Backstitch.Parser);
    private readonly pbc::RepeatedField<global::Service.Backstitch> backstitches_ = new pbc::RepeatedField<global::Service.Backstitch>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Service.Backstitch> Backstitches {
      get { return backstitches_; }
    }

    /// <summary>Field number for the "elements" field.</summary>
    public const int ElementsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Service.Element> _repeated_elements_codec
        = pb::FieldCodec.ForMessage(82, global::Service.Element.Parser);
    private readonly pbc::RepeatedField<global::Service.Element> elements_ = new pbc::RepeatedField<global::Service.Element>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Service.Element> Elements {
      get { return elements_; }
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 11;
    private string ownerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pattern);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pattern other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Info, other.Info)) return false;
      if (!object.Equals(Canvas, other.Canvas)) return false;
      if (!object.Equals(Strands, other.Strands)) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if(!configurations_.Equals(other.configurations_)) return false;
      if(!stitches_.Equals(other.stitches_)) return false;
      if(!backstitches_.Equals(other.backstitches_)) return false;
      if(!elements_.Equals(other.elements_)) return false;
      if (OwnerId != other.OwnerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (canvas_ != null) hash ^= Canvas.GetHashCode();
      if (strands_ != null) hash ^= Strands.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      hash ^= configurations_.GetHashCode();
      hash ^= stitches_.GetHashCode();
      hash ^= backstitches_.GetHashCode();
      hash ^= elements_.GetHashCode();
      if (OwnerId.Length != 0) hash ^= OwnerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (canvas_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Canvas);
      }
      if (strands_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Strands);
      }
      if (Width != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Height);
      }
      configurations_.WriteTo(output, _repeated_configurations_codec);
      stitches_.WriteTo(output, _repeated_stitches_codec);
      backstitches_.WriteTo(output, _repeated_backstitches_codec);
      elements_.WriteTo(output, _repeated_elements_codec);
      if (OwnerId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(OwnerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (canvas_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Canvas);
      }
      if (strands_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Strands);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      size += configurations_.CalculateSize(_repeated_configurations_codec);
      size += stitches_.CalculateSize(_repeated_stitches_codec);
      size += backstitches_.CalculateSize(_repeated_backstitches_codec);
      size += elements_.CalculateSize(_repeated_elements_codec);
      if (OwnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pattern other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::Service.Info();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.canvas_ != null) {
        if (canvas_ == null) {
          canvas_ = new global::Service.Canvas();
        }
        Canvas.MergeFrom(other.Canvas);
      }
      if (other.strands_ != null) {
        if (strands_ == null) {
          strands_ = new global::Service.Strands();
        }
        Strands.MergeFrom(other.Strands);
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      configurations_.Add(other.configurations_);
      stitches_.Add(other.stitches_);
      backstitches_.Add(other.backstitches_);
      elements_.Add(other.elements_);
      if (other.OwnerId.Length != 0) {
        OwnerId = other.OwnerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::Service.Info();
            }
            input.ReadMessage(info_);
            break;
          }
          case 26: {
            if (canvas_ == null) {
              canvas_ = new global::Service.Canvas();
            }
            input.ReadMessage(canvas_);
            break;
          }
          case 34: {
            if (strands_ == null) {
              strands_ = new global::Service.Strands();
            }
            input.ReadMessage(strands_);
            break;
          }
          case 40: {
            Width = input.ReadUInt32();
            break;
          }
          case 48: {
            Height = input.ReadUInt32();
            break;
          }
          case 58: {
            configurations_.AddEntriesFrom(input, _repeated_configurations_codec);
            break;
          }
          case 66: {
            stitches_.AddEntriesFrom(input, _repeated_stitches_codec);
            break;
          }
          case 74: {
            backstitches_.AddEntriesFrom(input, _repeated_backstitches_codec);
            break;
          }
          case 82: {
            elements_.AddEntriesFrom(input, _repeated_elements_codec);
            break;
          }
          case 90: {
            OwnerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Info : pb::IMessage<Info> {
    private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Service.PatternReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Info(Info other) : this() {
      title_ = other.title_;
      author_ = other.author_;
      company_ = other.company_;
      copyright_ = other.copyright_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Info Clone() {
      return new Info(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "author" field.</summary>
    public const int AuthorFieldNumber = 2;
    private string author_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Author {
      get { return author_; }
      set {
        author_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "company" field.</summary>
    public const int CompanyFieldNumber = 3;
    private string company_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Company {
      get { return company_; }
      set {
        company_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "copyright" field.</summary>
    public const int CopyrightFieldNumber = 4;
    private string copyright_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Copyright {
      get { return copyright_; }
      set {
        copyright_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (Author != other.Author) return false;
      if (Company != other.Company) return false;
      if (Copyright != other.Copyright) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Author.Length != 0) hash ^= Author.GetHashCode();
      if (Company.Length != 0) hash ^= Company.GetHashCode();
      if (Copyright.Length != 0) hash ^= Copyright.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (Author.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Author);
      }
      if (Company.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Company);
      }
      if (Copyright.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Copyright);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Author.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Author);
      }
      if (Company.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Company);
      }
      if (Copyright.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Copyright);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Info other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Author.Length != 0) {
        Author = other.Author;
      }
      if (other.Company.Length != 0) {
        Company = other.Company;
      }
      if (other.Copyright.Length != 0) {
        Copyright = other.Copyright;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            Author = input.ReadString();
            break;
          }
          case 26: {
            Company = input.ReadString();
            break;
          }
          case 34: {
            Copyright = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Canvas : pb::IMessage<Canvas> {
    private static readonly pb::MessageParser<Canvas> _parser = new pb::MessageParser<Canvas>(() => new Canvas());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Canvas> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Service.PatternReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Canvas() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Canvas(Canvas other) : this() {
      title_ = other.title_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Canvas Clone() {
      return new Canvas(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Canvas);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Canvas other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Canvas other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Strands : pb::IMessage<Strands> {
    private static readonly pb::MessageParser<Strands> _parser = new pb::MessageParser<Strands>(() => new Strands());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Strands> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Service.PatternReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Strands() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Strands(Strands other) : this() {
      full_ = other.full_;
      half_ = other.half_;
      quarter_ = other.quarter_;
      threeQuarter_ = other.threeQuarter_;
      petit_ = other.petit_;
      backstitch_ = other.backstitch_;
      frenchKnot_ = other.frenchKnot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Strands Clone() {
      return new Strands(this);
    }

    /// <summary>Field number for the "full" field.</summary>
    public const int FullFieldNumber = 1;
    private int full_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Full {
      get { return full_; }
      set {
        full_ = value;
      }
    }

    /// <summary>Field number for the "half" field.</summary>
    public const int HalfFieldNumber = 2;
    private int half_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Half {
      get { return half_; }
      set {
        half_ = value;
      }
    }

    /// <summary>Field number for the "quarter" field.</summary>
    public const int QuarterFieldNumber = 3;
    private int quarter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Quarter {
      get { return quarter_; }
      set {
        quarter_ = value;
      }
    }

    /// <summary>Field number for the "three_quarter" field.</summary>
    public const int ThreeQuarterFieldNumber = 4;
    private int threeQuarter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ThreeQuarter {
      get { return threeQuarter_; }
      set {
        threeQuarter_ = value;
      }
    }

    /// <summary>Field number for the "petit" field.</summary>
    public const int PetitFieldNumber = 5;
    private int petit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Petit {
      get { return petit_; }
      set {
        petit_ = value;
      }
    }

    /// <summary>Field number for the "backstitch" field.</summary>
    public const int BackstitchFieldNumber = 6;
    private int backstitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Backstitch {
      get { return backstitch_; }
      set {
        backstitch_ = value;
      }
    }

    /// <summary>Field number for the "french_knot" field.</summary>
    public const int FrenchKnotFieldNumber = 7;
    private int frenchKnot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FrenchKnot {
      get { return frenchKnot_; }
      set {
        frenchKnot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Strands);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Strands other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Full != other.Full) return false;
      if (Half != other.Half) return false;
      if (Quarter != other.Quarter) return false;
      if (ThreeQuarter != other.ThreeQuarter) return false;
      if (Petit != other.Petit) return false;
      if (Backstitch != other.Backstitch) return false;
      if (FrenchKnot != other.FrenchKnot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Full != 0) hash ^= Full.GetHashCode();
      if (Half != 0) hash ^= Half.GetHashCode();
      if (Quarter != 0) hash ^= Quarter.GetHashCode();
      if (ThreeQuarter != 0) hash ^= ThreeQuarter.GetHashCode();
      if (Petit != 0) hash ^= Petit.GetHashCode();
      if (Backstitch != 0) hash ^= Backstitch.GetHashCode();
      if (FrenchKnot != 0) hash ^= FrenchKnot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Full != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Full);
      }
      if (Half != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Half);
      }
      if (Quarter != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Quarter);
      }
      if (ThreeQuarter != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ThreeQuarter);
      }
      if (Petit != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Petit);
      }
      if (Backstitch != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Backstitch);
      }
      if (FrenchKnot != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FrenchKnot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Full != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Full);
      }
      if (Half != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Half);
      }
      if (Quarter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quarter);
      }
      if (ThreeQuarter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreeQuarter);
      }
      if (Petit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Petit);
      }
      if (Backstitch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Backstitch);
      }
      if (FrenchKnot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrenchKnot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Strands other) {
      if (other == null) {
        return;
      }
      if (other.Full != 0) {
        Full = other.Full;
      }
      if (other.Half != 0) {
        Half = other.Half;
      }
      if (other.Quarter != 0) {
        Quarter = other.Quarter;
      }
      if (other.ThreeQuarter != 0) {
        ThreeQuarter = other.ThreeQuarter;
      }
      if (other.Petit != 0) {
        Petit = other.Petit;
      }
      if (other.Backstitch != 0) {
        Backstitch = other.Backstitch;
      }
      if (other.FrenchKnot != 0) {
        FrenchKnot = other.FrenchKnot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Full = input.ReadInt32();
            break;
          }
          case 16: {
            Half = input.ReadInt32();
            break;
          }
          case 24: {
            Quarter = input.ReadInt32();
            break;
          }
          case 32: {
            ThreeQuarter = input.ReadInt32();
            break;
          }
          case 40: {
            Petit = input.ReadInt32();
            break;
          }
          case 48: {
            Backstitch = input.ReadInt32();
            break;
          }
          case 56: {
            FrenchKnot = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StitchConfiguration : pb::IMessage<StitchConfiguration> {
    private static readonly pb::MessageParser<StitchConfiguration> _parser = new pb::MessageParser<StitchConfiguration>(() => new StitchConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StitchConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Service.PatternReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StitchConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StitchConfiguration(StitchConfiguration other) : this() {
      symbol_ = other.symbol_;
      hexColor_ = other.hexColor_;
      strands_ = other.strands_ != null ? other.strands_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StitchConfiguration Clone() {
      return new StitchConfiguration(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hex_color" field.</summary>
    public const int HexColorFieldNumber = 2;
    private string hexColor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HexColor {
      get { return hexColor_; }
      set {
        hexColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "strands" field.</summary>
    public const int StrandsFieldNumber = 3;
    private global::Service.Strands strands_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Service.Strands Strands {
      get { return strands_; }
      set {
        strands_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StitchConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StitchConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (HexColor != other.HexColor) return false;
      if (!object.Equals(Strands, other.Strands)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (HexColor.Length != 0) hash ^= HexColor.GetHashCode();
      if (strands_ != null) hash ^= Strands.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (HexColor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HexColor);
      }
      if (strands_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Strands);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (HexColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HexColor);
      }
      if (strands_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Strands);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StitchConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.HexColor.Length != 0) {
        HexColor = other.HexColor;
      }
      if (other.strands_ != null) {
        if (strands_ == null) {
          strands_ = new global::Service.Strands();
        }
        Strands.MergeFrom(other.Strands);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            HexColor = input.ReadString();
            break;
          }
          case 26: {
            if (strands_ == null) {
              strands_ = new global::Service.Strands();
            }
            input.ReadMessage(strands_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Stitch : pb::IMessage<Stitch> {
    private static readonly pb::MessageParser<Stitch> _parser = new pb::MessageParser<Stitch>(() => new Stitch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Stitch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Service.PatternReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stitch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stitch(Stitch other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      type_ = other.type_;
      configurationIndex_ = other.configurationIndex_;
      marked_ = other.marked_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Stitch Clone() {
      return new Stitch(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private uint x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private uint y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Service.StitchType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Service.StitchType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "configuration_index" field.</summary>
    public const int ConfigurationIndexFieldNumber = 4;
    private int configurationIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigurationIndex {
      get { return configurationIndex_; }
      set {
        configurationIndex_ = value;
      }
    }

    /// <summary>Field number for the "marked" field.</summary>
    public const int MarkedFieldNumber = 5;
    private bool marked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Marked {
      get { return marked_; }
      set {
        marked_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Stitch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Stitch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Type != other.Type) return false;
      if (ConfigurationIndex != other.ConfigurationIndex) return false;
      if (Marked != other.Marked) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ConfigurationIndex != 0) hash ^= ConfigurationIndex.GetHashCode();
      if (Marked != false) hash ^= Marked.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Y);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (ConfigurationIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ConfigurationIndex);
      }
      if (Marked != false) {
        output.WriteRawTag(40);
        output.WriteBool(Marked);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (ConfigurationIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigurationIndex);
      }
      if (Marked != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Stitch other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ConfigurationIndex != 0) {
        ConfigurationIndex = other.ConfigurationIndex;
      }
      if (other.Marked != false) {
        Marked = other.Marked;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadUInt32();
            break;
          }
          case 16: {
            Y = input.ReadUInt32();
            break;
          }
          case 24: {
            type_ = (global::Service.StitchType) input.ReadEnum();
            break;
          }
          case 32: {
            ConfigurationIndex = input.ReadInt32();
            break;
          }
          case 40: {
            Marked = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Backstitch : pb::IMessage<Backstitch> {
    private static readonly pb::MessageParser<Backstitch> _parser = new pb::MessageParser<Backstitch>(() => new Backstitch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Backstitch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Service.PatternReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Backstitch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Backstitch(Backstitch other) : this() {
      x1_ = other.x1_;
      y1_ = other.y1_;
      x2_ = other.x2_;
      y2_ = other.y2_;
      configurationIndex_ = other.configurationIndex_;
      marked_ = other.marked_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Backstitch Clone() {
      return new Backstitch(this);
    }

    /// <summary>Field number for the "x_1" field.</summary>
    public const int X1FieldNumber = 1;
    private uint x1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint X1 {
      get { return x1_; }
      set {
        x1_ = value;
      }
    }

    /// <summary>Field number for the "y_1" field.</summary>
    public const int Y1FieldNumber = 2;
    private uint y1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Y1 {
      get { return y1_; }
      set {
        y1_ = value;
      }
    }

    /// <summary>Field number for the "x_2" field.</summary>
    public const int X2FieldNumber = 3;
    private uint x2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint X2 {
      get { return x2_; }
      set {
        x2_ = value;
      }
    }

    /// <summary>Field number for the "y_2" field.</summary>
    public const int Y2FieldNumber = 4;
    private uint y2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Y2 {
      get { return y2_; }
      set {
        y2_ = value;
      }
    }

    /// <summary>Field number for the "configuration_index" field.</summary>
    public const int ConfigurationIndexFieldNumber = 5;
    private int configurationIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigurationIndex {
      get { return configurationIndex_; }
      set {
        configurationIndex_ = value;
      }
    }

    /// <summary>Field number for the "marked" field.</summary>
    public const int MarkedFieldNumber = 6;
    private bool marked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Marked {
      get { return marked_; }
      set {
        marked_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Backstitch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Backstitch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X1 != other.X1) return false;
      if (Y1 != other.Y1) return false;
      if (X2 != other.X2) return false;
      if (Y2 != other.Y2) return false;
      if (ConfigurationIndex != other.ConfigurationIndex) return false;
      if (Marked != other.Marked) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X1 != 0) hash ^= X1.GetHashCode();
      if (Y1 != 0) hash ^= Y1.GetHashCode();
      if (X2 != 0) hash ^= X2.GetHashCode();
      if (Y2 != 0) hash ^= Y2.GetHashCode();
      if (ConfigurationIndex != 0) hash ^= ConfigurationIndex.GetHashCode();
      if (Marked != false) hash ^= Marked.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X1 != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(X1);
      }
      if (Y1 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Y1);
      }
      if (X2 != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(X2);
      }
      if (Y2 != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Y2);
      }
      if (ConfigurationIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ConfigurationIndex);
      }
      if (Marked != false) {
        output.WriteRawTag(48);
        output.WriteBool(Marked);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X1);
      }
      if (Y1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y1);
      }
      if (X2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X2);
      }
      if (Y2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y2);
      }
      if (ConfigurationIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigurationIndex);
      }
      if (Marked != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Backstitch other) {
      if (other == null) {
        return;
      }
      if (other.X1 != 0) {
        X1 = other.X1;
      }
      if (other.Y1 != 0) {
        Y1 = other.Y1;
      }
      if (other.X2 != 0) {
        X2 = other.X2;
      }
      if (other.Y2 != 0) {
        Y2 = other.Y2;
      }
      if (other.ConfigurationIndex != 0) {
        ConfigurationIndex = other.ConfigurationIndex;
      }
      if (other.Marked != false) {
        Marked = other.Marked;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X1 = input.ReadUInt32();
            break;
          }
          case 16: {
            Y1 = input.ReadUInt32();
            break;
          }
          case 24: {
            X2 = input.ReadUInt32();
            break;
          }
          case 32: {
            Y2 = input.ReadUInt32();
            break;
          }
          case 40: {
            ConfigurationIndex = input.ReadInt32();
            break;
          }
          case 48: {
            Marked = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Element : pb::IMessage<Element> {
    private static readonly pb::MessageParser<Element> _parser = new pb::MessageParser<Element>(() => new Element());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Element> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Service.PatternReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Element() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Element(Element other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      configurationIndex_ = other.configurationIndex_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Element Clone() {
      return new Element(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private uint x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private uint y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "configuration_index" field.</summary>
    public const int ConfigurationIndexFieldNumber = 3;
    private int configurationIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigurationIndex {
      get { return configurationIndex_; }
      set {
        configurationIndex_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Service.ElementType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Service.ElementType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Element);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Element other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (ConfigurationIndex != other.ConfigurationIndex) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (ConfigurationIndex != 0) hash ^= ConfigurationIndex.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Y);
      }
      if (ConfigurationIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ConfigurationIndex);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
      }
      if (ConfigurationIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigurationIndex);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Element other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.ConfigurationIndex != 0) {
        ConfigurationIndex = other.ConfigurationIndex;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadUInt32();
            break;
          }
          case 16: {
            Y = input.ReadUInt32();
            break;
          }
          case 24: {
            ConfigurationIndex = input.ReadInt32();
            break;
          }
          case 32: {
            type_ = (global::Service.ElementType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
